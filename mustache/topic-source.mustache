{{>licenseInfo}}
#include "{{classname}}.h"

#include "{{unrealModuleName}}Module.h"
{{#operations}}
#include "{{modelNamePrefix}}{{classname}}.h"
{{/operations}}

#include "Serialization/JsonSerializer.h"

{{#cppNamespaceDeclarations}}
namespace {{.}}
{
{{/cppNamespaceDeclarations}}

bool {{classname}}::ProcessEvent(const FString& InEventString) const
{
	TSharedPtr<FJsonValue> JsonValue;
	auto Reader = TJsonReaderFactory<>::Create(InEventString);

	if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
	{
		return ProcessEvent(JsonValue);
	}
	return false;
}

bool {{classname}}::ProcessEvent(const TSharedPtr<FJsonValue>& InEventJson) const
{
	// Note: there could be a better way but for now we try to serialize all events until one matches
	check(InEventJson);

	{{#operations}}
	{{#isReceive}}
	{
		{{classname}} Event;
		if(Event.FromJson(InEventJson))
		{
			On{{classname}}Received.Broadcast(Event);
			return true;
		}
	}
	{{/isReceive}}
	{{/operations}}
	return false;
}

{{#operations}}
{{#isSend}}
void {{topicClassName}}::PublishEvent(const {{classname}}& Event) const
{
	FString JsonBody;
	JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

	Event.WriteJson(Writer);
	Writer->Close();

	PublishEvent(JsonBody);
}

{{/isSend}}
{{/operations}}
void {{topicClassName}}::PublishEvent(const FString& InEventString) const
{
	OnMessagePublished.ExecuteIfBound(InEventString);
}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
