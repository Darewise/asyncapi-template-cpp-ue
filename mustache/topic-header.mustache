{{>licenseInfo}}
#pragma once

#include "CoreMinimal.h"
#include "{{modelNamePrefix}}BaseModel.h"

{{#imports}}{{{import}}}
{{/imports}}

{{#cppNamespaceDeclarations}}
namespace {{.}}
{
{{/cppNamespaceDeclarations}}

/*
{{#classname}}
 * {{.}}
 *
 {{/classname}}
 {{#title}}
 * {{.}}
 *
 {{/title}}
 {{#description}}
 * {{.}}
 *
 {{/description}}
 {{#examples}}
 * {{.}}
 *
 {{/examples}}
 */
class {{dllapi}} {{classname}}
{
public:
	bool ProcessEvent(const FString& InEventString) const;
	bool ProcessEvent(const TSharedRef<FJsonObject>& InEventJson) const;

    {{#operations}}{{#operation}}DECLARE_DELEGATE_OneParam(F{{operationIdCamelCase}}Delegate, const {{operationIdCamelCase}}&);
    {{/operation}}{{/operations}}
    {{#operations}}{{#operation}}{{#description}}/* {{{.}}} */
	{{/description}}virtual void PublishEvent(const {{operationIdCamelCase}}&) const;
    {{/operation}}{{/operations}}

private:
	virtual void PublishEvent(const FString& a_jsonBody);
};

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
