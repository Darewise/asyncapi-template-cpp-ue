{{>licenseInfo}}
#pragma once

#include "CoreMinimal.h"
#include "{{modelNamePrefix}}BaseModel.h"

{{#cppNamespaceDeclarations}}
namespace {{.}}
{
{{/cppNamespaceDeclarations}}

{{#operations}}
class {{classname}};
{{/operations}}

/*
{{#classname}}
 * {{.}}
 *
 {{/classname}}
 {{#title}}
 * {{.}}
 *
 {{/title}}
 {{#description}}
 * {{.}}
 *
 {{/description}}
 {{#examples}}
 * {{.}}
 *
 {{/examples}}
 */
class {{dllapi}} {{classname}}
{
public:
    virtual ~{{classname}}() {}
	bool ProcessEvent(const FString& InEventString) const;
	bool ProcessEvent(const TSharedPtr<FJsonValue>& InEventJson) const;

    {{#operations}}{{#isReceive}}
    {{#description}}/* {{{.}}} */
    {{/description}}DECLARE_MULTICAST_DELEGATE_OneParam(F{{classname}}Delegate, const {{classname}}&);
    F{{classname}}Delegate On{{classname}}Received;
    {{/isReceive}}
    {{/operations}}

    {{#operations}}{{#isSend}}
    {{#description}}/* {{{.}}} */
	{{/description}}void PublishEvent(const {{classname}}&) const;
    {{/isSend}}{{/operations}}

    DECLARE_DELEGATE_OneParam(FPublishDelegate, const FString&)
    FPublishDelegate OnMessagePublished;
protected:
	void PublishEvent(const FString& InEventString) const;
};

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
