{{>licenseInfo}}
#pragma once

#include "{{modelNamePrefix}}BaseModel.h"
{{#imports}}{{{import}}}
{{/imports}}

{{#cppNamespaceDeclarations}}
namespace {{.}}
{
{{/cppNamespaceDeclarations}}
{{#models}}
/*
{{#classname}}
 * {{.}}
 *
 {{/classname}}
 {{#title}}
 * {{.}}
 *
 {{/title}}
 {{#description}}
 * {{.}}
 *
 {{/description}}
 {{#examples}}
 * {{.}}
 *
 {{/examples}}
 */
class {{dllapi}} {{classname}} : public Model
{
public:
    virtual ~{{classname}}() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	{{#isString}}
	{{#isEnum}}
	enum class Values
	{
		{{#enumVars}}
		{{name}},
		{{/enumVars}}
  	};

	Values Value{{#defaultValue}} = {{{.}}}{{/defaultValue}};

	static FString EnumToString(const Values& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, Values& EnumValue);
	{{/isEnum}}
	{{^isEnum}}
	FString Value{{#defaultValue}} = {{{.}}}{{/defaultValue}};
	{{/isEnum}}
	{{/isString}}
	{{#vars}}
	{{#isEnum}}
	enum class {{{enumName}}}
	{
		{{#enumVars}}
		{{name}},
		{{/enumVars}}
  	};

	static FString EnumToString(const {{{enumName}}}& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, {{{enumName}}}& EnumValue);
	{{#description}}/* {{{.}}} */
	{{/description}}{{#examples}}/* Example: {{{.}}} */
	{{/examples}}{{^required}}TOptional<{{/required}}{{{datatypeWithEnum}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
	{{^isEnum}}
	{{#description}}/* {{{.}}} */
	{{/description}}{{#examples}}/* Example: {{{.}}} */
	{{/examples}}{{^required}}TOptional<{{/required}}{{{datatype}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
    {{/vars}}
	{{#headers}}
	struct Headers
	{
    	{{#vars}}
		{{#isEnum}}
		enum class {{{enumName}}}
		{
			{{#enumVars}}
			{{name}},
			{{/enumVars}}
  		};

		static FString EnumToString(const {{{enumName}}}& EnumValue);
		static bool EnumFromString(const FString& EnumAsString, {{{enumName}}}& EnumValue);
		{{#description}}/* {{{.}}} */
		{{/description}}{{#examples}}/* Example: {{{.}}} */
		{{/examples}}{{^required}}TOptional<{{/required}}{{{datatypeWithEnum}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
		{{/isEnum}}
		{{^isEnum}}
		{{#description}}/* {{{.}}} */
		{{/description}}{{#examples}}/* Example: {{{.}}} */
		{{/examples}}{{^required}}TOptional<{{/required}}{{{datatype}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
		{{/isEnum}}
	    {{/vars}}
	} Headers;

	{{/headers}}
	{{#payload}}
	struct Payload
	{
    	{{#vars}}
		{{#isEnum}}
		enum class {{{enumName}}}
		{
			{{#enumVars}}
			{{name}},
			{{/enumVars}}
  		};

		static FString EnumToString(const {{{enumName}}}& EnumValue);
		static bool EnumFromString(const FString& EnumAsString, {{{enumName}}}& EnumValue);
		{{#description}}/* {{{.}}} */
		{{/description}}{{#examples}}/* Example: {{{.}}} */
		{{/examples}}{{^required}}TOptional<{{/required}}{{{datatypeWithEnum}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
		{{/isEnum}}
		{{^isEnum}}
		{{#description}}/* {{{.}}} */
		{{/description}}{{#examples}}/* Example: {{{.}}} */
		{{/examples}}{{^required}}TOptional<{{/required}}{{{datatype}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
		{{/isEnum}}
    	{{/vars}}
	} Payload;
	{{/payload}}
};

{{/models}}
{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
