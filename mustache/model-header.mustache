{{>licenseInfo}}
#pragma once

#include "{{modelNamePrefix}}BaseModel.h"
{{#imports}}{{{import}}}
{{/imports}}

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}
{{#models}}

/*
 * {{classname}}
 *
 * {{title}}
 *
 * {{description}}
 *
 * {{examples}}
 */
class {{dllapi}} {{classname}} : public Model
{
public:
    virtual ~{{classname}}() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	{{#isString}}
	{{#isEnum}}
	enum class Values
	{
		{{#enumVars}}
		{{name}},
		{{/enumVars}}
  	};

	Values Value{{#defaultValue}} = {{{.}}}{{/defaultValue}};

	static FString EnumToString(const Values& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, Values& EnumValue);
	{{/isEnum}}
	{{^isEnum}}
	FString Value{{#defaultValue}} = {{{.}}}{{/defaultValue}};
	{{/isEnum}}
	{{/isString}}
    {{#vars}}
	{{#isEnum}}
	enum class {{{enumName}}}
	{
		{{#enumVars}}
		{{name}},
		{{/enumVars}}
  	};

	static FString EnumToString(const {{{enumName}}}& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, {{{enumName}}}& EnumValue);
	{{#description}}/* {{{.}}} */
	{{/description}}{{^required}}TOptional<{{/required}}{{{datatypeWithEnum}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
	{{^isEnum}}
	{{#description}}/* {{{.}}} */
	{{/description}}{{^required}}TOptional<{{/required}}{{{datatype}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
    {{/vars}}
};

{{/models}}
{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
