{{>licenseInfo}}
#include "{{filename}}.h"

#include "{{unrealModuleName}}Module.h"
#include "{{modelNamePrefix}}Helpers.h"

{{#cppNamespaceDeclarations}}
namespace {{.}}
{
{{/cppNamespaceDeclarations}}
{{#models}}
{{#isEnum}}
inline FString ToString(const {{classname}}::Values& Value)
{
	switch (Value)
	{
	{{#enumVars}}
	case {{classname}}::Values::{{name}}:
		return TEXT("{{{value}}}");
	{{/enumVars}}
	}

	UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Invalid {{classname}}::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString {{classname}}::EnumToString(const {{classname}}::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, {{classname}}::Values& Value)
{
	static TMap<FString, {{classname}}::Values> StringToEnum = { {{#enumVars}}
		{ TEXT("{{{value}}}"), {{classname}}::Values::{{name}} },{{/enumVars}} };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool {{classname}}::EnumFromString(const FString& EnumAsString, {{classname}}::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const {{classname}}::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, {{classname}}::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

{{/isEnum}}
{{#vars}}{{#isEnum}}
inline FString ToString(const {{classname}}::{{{enumName}}}& Value)
{
	switch (Value)
	{
	{{#enumVars}}
	case {{classname}}::{{{enumName}}}::{{name}}:
		return TEXT("{{{value}}}");
	{{/enumVars}}
	}

	UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Invalid {{classname}}::{{{enumName}}} Value (%d)"), (int)Value);
	return TEXT("");
}

FString {{classname}}::EnumToString(const {{classname}}::{{{enumName}}}& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, {{classname}}::{{{enumName}}}& Value)
{
	static TMap<FString, {{classname}}::{{{enumName}}}> StringToEnum = { {{#enumVars}}
		{ TEXT("{{{value}}}"), {{classname}}::{{{enumName}}}::{{name}} },{{/enumVars}} };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool {{classname}}::EnumFromString(const FString& EnumAsString, {{classname}}::{{{enumName}}}& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const {{classname}}::{{{enumName}}}& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, {{classname}}::{{{enumName}}}& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

{{/isEnum}}{{/vars}}
{{#headers}}{{#vars}}{{#isEnum}}
inline FString ToString(const {{messageClassname}}::Headers::{{{enumName}}}& Value)
{
	switch (Value)
	{
	{{#enumVars}}
	case {{messageClassname}}::Headers::{{{enumName}}}::{{name}}:
		return TEXT("{{{value}}}");
	{{/enumVars}}
	}

	UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Invalid {{messageClassname}}::Headers::{{{enumName}}} Value (%d)"), (int)Value);
	return TEXT("");
}

FString {{messageClassname}}::Headers::EnumToString(const {{messageClassname}}::Headers::{{{enumName}}}& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, {{messageClassname}}::Headers::{{{enumName}}}& Value)
{
	static TMap<FString, {{messageClassname}}::Headers::{{{enumName}}}> StringToEnum = { {{#enumVars}}
		{ TEXT("{{{value}}}"), {{messageClassname}}::Headers::{{{enumName}}}::{{name}} },{{/enumVars}} };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool {{messageClassname}}::Headers::EnumFromString(const FString& EnumAsString, {{messageClassname}}::Headers::{{{enumName}}}& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const {{messageClassname}}::Payload::{{{enumName}}}& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, {{messageClassname}}::Payload::{{{enumName}}}& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

{{/isEnum}}{{/vars}}{{/headers}}
{{#payload}}{{#vars}}{{#isEnum}}
inline FString ToString(const {{messageClassname}}::Payload::{{{enumName}}}& Value)
{
	switch (Value)
	{
	{{#enumVars}}
	case {{messageClassname}}::Payload::{{{enumName}}}::{{name}}:
		return TEXT("{{{value}}}");
	{{/enumVars}}
	}

	UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Invalid {{messageClassname}}::Payload::{{{enumName}}} Value (%d)"), (int)Value);
	return TEXT("");
}

FString {{messageClassname}}::Payload::EnumToString(const {{messageClassname}}::Payload::{{{enumName}}}& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, {{messageClassname}}::Payload::{{{enumName}}}& Value)
{
	static TMap<FString, {{messageClassname}}::Payload::{{{enumName}}}> StringToEnum = { {{#enumVars}}
		{ TEXT("{{{value}}}"), {{messageClassname}}::Payload::{{{enumName}}}::{{name}} },{{/enumVars}} };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool {{messageClassname}}::Payload::EnumFromString(const FString& EnumAsString, {{messageClassname}}::Payload::{{{enumName}}}& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const {{messageClassname}}::Payload::{{{enumName}}}& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, {{messageClassname}}::Payload::{{{enumName}}}& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

{{/isEnum}}{{/vars}}{{/payload}}
void {{classname}}::WriteJson(JsonWriter& Writer) const
{
	{{#isString}}
	WriteJsonValue(Writer, Value);
	{{/isString}}
	{{^isString}}
	Writer->WriteObjectStart();
	{{#vars}}
	{{#required}}
	Writer->WriteIdentifierPrefix(TEXT("{{id}}")); WriteJsonValue(Writer, {{name}});
	{{/required}}
	{{^required}}
	if ({{name}}.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("{{id}}")); WriteJsonValue(Writer, {{name}}.GetValue());
	}
	{{/required}}
    {{/vars}}
	{{#headers}}
    {{#vars}}
	{{#required}}
	Writer->WriteIdentifierPrefix(TEXT("{{id}}")); WriteJsonValue(Writer, Headers.{{name}});
	{{/required}}
	{{^required}}
	if (Headers.{{name}}.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("{{id}}")); WriteJsonValue(Writer, Headers.{{name}}.GetValue());
	}
	{{/required}}
    {{/vars}}
	{{/headers}}
	{{#payload}}
    {{#vars}}
	{{#required}}
	Writer->WriteIdentifierPrefix(TEXT("{{id}}")); WriteJsonValue(Writer, Payload.{{name}});
	{{/required}}
	{{^required}}
	if (Payload.{{name}}.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("{{id}}")); WriteJsonValue(Writer, Payload.{{name}}.GetValue());
	}
	{{/required}}
    {{/vars}}
	{{/payload}}
	Writer->WriteObjectEnd();
	{{/isString}}
}

bool {{classname}}::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	{{#isString}}
	return TryGetJsonValue(JsonValue, Value);
	{{/isString}}
	{{^isString}}
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	{{#vars}}
	{{#required}}
	{{^isWriteOnly}}ParseSuccess &= {{/isWriteOnly}}TryGetJsonValue(*Object, TEXT("{{id}}"), {{name}});
	{{/required}}
	{{^required}}
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("{{id}}"), {{name}});
	{{/required}}
	{{/vars}}
	{{#headers}}
	{{#vars}}
	{{#required}}
	{{^isWriteOnly}}ParseSuccess &= {{/isWriteOnly}}TryGetJsonValue(*Object, TEXT("{{id}}"), Headers.{{name}});
	{{/required}}
	{{^required}}
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("{{id}}"), Headers.{{name}});
	{{/required}}
	{{/vars}}
	{{/headers}}
	{{#payload}}
	{{#vars}}
	{{#required}}
	{{^isWriteOnly}}ParseSuccess &= {{/isWriteOnly}}TryGetJsonValue(*Object, TEXT("{{id}}"), Payload.{{name}});
	{{/required}}
	{{^required}}
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("{{id}}"), Payload.{{name}});
	{{/required}}
	{{/vars}}
	{{/payload}}

	return ParseSuccess;
	{{/isString}}
}

{{/models}}
{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
